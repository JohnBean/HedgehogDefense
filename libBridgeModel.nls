;libBridgeModel
;  Variables and procedures specific to the bridge crossing model

globals [  
  ; Variables used in bridge crossing
  numBridges;How many bridgeheads wide the crossing is

  ;;staging areas
  chStagingX;;the channel bridge
  chStagingY
  chX
  chY
  chCrossed
   
  abStagingX
  abStagingY
  abX
  abY
  abCrossed
  
  amStagingX
  amStagingY
  amX
  amY
  amCrossed
  
  brStagingX
  brStagingY
  brX
  brY
  brCrossed
  
  peStagingX
  peStagingY
  peX
  peY
  peCrossed
]

to setup-BridgeModel
  set chStagingX array:from-list[135 133 137 131 139 129 141 127 143 125 145]
  set chStagingY array:from-list[484 485 483 486 482 487 481 488 480 489 479]
  set abStagingX array:from-list[189 191 187 193 185 195 183 197 181 199 179]
  set abStagingY array:from-list[447 445.5 448.5 444 450 442.5 451.5 441 453 439.5 454.5]
  set amStagingX array:from-list[364 366 362 368 360 370 358 372 356 374 354]
  ;set amStagingY array:from-list[342 342 342 342 342 342 342 342 342 342 342]
  set amStagingY array:from-list[336 335 337 334 338 333 339 332 340 331 341]
  set brStagingX array:from-list[526 528 524 530 522 532 520 534 518 536 516]
  set brStagingY array:from-list[364 365 363 366 362 367 361 368 360 369 359]
  set peStagingX array:from-list[589 591 587 593 585 595 583 597 581 599 579]
  set peStagingY array:from-list[349 346 352 343 355 340 358 337 361 334 364]
  set chX 132
  set chY 479
  set abX 185;the position accross the abevile bridge units will move to
  set abY 443
  set amX 362
  set amY 332
  set brX 531
  set brY 355
  set peX 583
  set peY 346
  set numBridges 1
  
  ;this ensures that the sliders total 212
  ;setting the Channel bridge slider to max - the toal of the other ensures we always have at least 212,
  set crossingChannel 212 - crossingAbbeville - crossingAmiens - crossingPeronne - crossingBray 
  ;the rest ensures we don't have over
  if(crossingChannel < 0)[
    ;if there are too many troops which cause the set channel above to go negative 
    ;we remove from this and the adjacent bridge to fix it
    set crossingAbbeville crossingAbbeville + crossingChannel
    set crossingChannel 0
  ]
  if(crossingAbbeville < 0)[
    ;if this caused Abbeville to go negative as well this process continues
    ;until we assure all of the sliders are placed in such a way that there can't be too many brigades
    set crossingAmiens crossingAmiens + crossingAbbeville
    set crossingAbbeville 0
  ]
  if(crossingAmiens < 0)[
    set crossingBray crossingBray + crossingAmiens
    set crossingAmiens 0
  ]
end

to place-germans
  random-seed 500 + who
  ifelse(who < crossingChannel)[
    set targetBridge 1
    ifelse(who < 3)[
      ifelse(who < 1)[
       setxy 186 + random 4 + who * 15 535 + random 4 - who * 2  - GermanY
      ][
      setxy 165  + random 4 + who * 15 520 + random 4 - who * 2  - GermanY
      ]
    ][
      setxy 140 + random 40 510 + random 40 - GermanY
    ]
  ][
  ifelse(who < crossingChannel + crossingAbbeville)[
    set targetBridge 2
    ifelse(who < crossingChannel +  10)[
      ifelse(who < crossingChannel + 2)[
       setxy 196 + random 4 + (who - crossingChannel) * -5 535 + random 4 - (who - crossingChannel) * 12  - GermanY
      ][
      ifelse(who < crossingChannel + 6)[
         setxy 234  + random 9 + (who - crossingChannel)* 15 516 + random 9 - (who - crossingChannel) * 9  - GermanY
      ][
         setxy 169  + random 9 + (who - crossingChannel)* 15 495 + random 9 - (who - crossingChannel - 4) * 9  - GermanY
      ]]
    ][
      setxy 195 + random 60 465 + random 60 - GermanY
    ]
  ][
  ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens)[
    set targetBridge 3
    ifelse(who < crossingChannel + crossingAbbeville +  12)[
      ifelse(who < crossingChannel + crossingAbbeville + 6)[
       ifelse(who < crossingChannel + crossingAbbeville + 3)[
        setxy  327 + random 8 + (who - crossingChannel - crossingAbbeville) * 15 464 + random 6 - GermanY - (who - crossingChannel - crossingAbbeville) * 12
       ][
       setxy  265 + random 9 + (who - crossingChannel - crossingAbbeville) * 15 467 + random 6 - GermanY - (who - crossingChannel - crossingAbbeville) * 9
       ] 
      ][
      ifelse(who < crossingChannel + crossingAbbeville + 9)[
        setxy  357 + random 8 + (who - crossingChannel - crossingAbbeville) * 10 354 + random 6 - GermanY + (who - crossingChannel - crossingAbbeville) * 6
       ][
       setxy  319 + random 9 + (who - crossingChannel - crossingAbbeville) * 10 327 + random 6 - GermanY + (who - crossingChannel - crossingAbbeville) * 5
       ] 
      ]
    ][
    
    setxy 347 + random 60 368 + random 60 - GermanY
    ]
  ][
  ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + crossingBray)[
   set targetBridge 4
   ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + 9)[
     ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + 5)[
      ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + 3)[
        setxy 443 + random 8 + (who - crossingChannel - crossingAbbeville - crossingAmiens) * 10 383 + random 8 - GermanY 
      ][
      setxy 418 + random 8 + (who - crossingChannel - crossingAbbeville - crossingAmiens) * 10 400 + random 8 - GermanY
      ]
     ][
     ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + 7)[
       setxy 448 + random 8 + (who - crossingChannel - crossingAbbeville - crossingAmiens) * 12 418 + random 8 - GermanY
     ][
     setxy 428 + random 8 + (who - crossingChannel - crossingAbbeville - crossingAmiens) * 12 402 + random 8 - GermanY
     ]
     ]
   ][
     setxy 468 + random 40 382 + random 40 - GermanY
   ]
  ][
  set targetBridge 5
  ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + crossingBray +  5)[
    ifelse(who < crossingChannel + crossingAbbeville + crossingAmiens + crossingBray +  3)[
    setxy 532 + random 5 + (who - crossingChannel - crossingAbbeville - crossingAmiens - crossingBray) * 6 420 + random 5 - (who - crossingChannel - crossingAbbeville - crossingAmiens - crossingBray) * 1 - GermanY
    ][
    setxy 519 + random 5 + (who - crossingChannel - crossingAbbeville - crossingAmiens - crossingBray) * 6 410 + random 5 - (who - crossingChannel - crossingAbbeville - crossingAmiens - crossingBray) * 1 - GermanY    
    ]
  ][
  setxy 552 + random 45 391 + random 45 - GermanY
  ]
  ]
  ]]]
end

to selectBridge
  if (state = s_RESERVE and allegiance = GERMAN) [    ; if brigade is german and ready for orders
    let i 0                                   ; the counter that determines what spot we are currently looking to fill
    let valid 1                               ;a check for if the spot we're looking at is valid for this brigade
    ;find the nearest empty waiting spot to fill in at
    let curBridge targetBridge
    repeat count turtles with[targetBridge = curBridge][
      set valid 1                             ;assume the spot we're looking at is valid until proven otherwise
      if((i < destinationNum and i > -1) or destinationNum = -1)[;if this brigade hasn't chosen a spot yet have them look for one
        ;;what row of the formation are we looking at?
        let row floor (i / 11)
        
        ;;this handles units looking to cross the Abbeville bridge
        if(targetBridge = 1)[
          ;this isn' a valid spot if someone else is going to use it
          if(any? units with[destinationNum = i and targetBridge = 1 and allegiance = GERMAN])[
            set valid 0
          ]
          ;the spot is not valid if it is farther from the bridge than the current destination
          if(i > destinationNum and destinationNum > -1)[
            set valid 0
          ]
          if(valid = 1)[
            ;find the location of this destination by finding the base location and shifting by the row it's in
            let goalX ((array:item chStagingX (i - (11 * row))) + (row * 2))
            let goalY ((array:item chStagingY (i - (11 * row))) + (row * 2))
            let myDistance sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor)))
            ;we are setting this brigade to move to destination i, no others can move here now
            if not(any? units with[targetBridge = 1 and allegiance = GERMAN and (destinationNum > i + 1 or destinationNum = -1) and sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor))) < myDistance])[
              ;we are setting this brigade to move to destination i, no others can move here now
              set destinationNum i
              set destinationX goalX
              set destinationY goalY
              set state s_Q_BRIDGE
              stop
            ]
          ]
        ]
        ;;this handles units looking to cross the Abbeville bridge
        if(targetBridge = 2)[
          ;this isn' a valid spot if someone else is going to use it
          if(any? units with[destinationNum = i and targetBridge = 2 and allegiance = GERMAN])[
            set valid 0
          ]
          ;the spot is not valid if it is farther from the bridge than the current destination
          if(i > destinationNum and destinationNum > -1)[
            set valid 0
          ]
          if(valid = 1)[
            ;find the location of this destination by finding the base location and shifting by the row it's in
            let goalX ((array:item abStagingX (i - (11 * row))) + (row * 2))
            let goalY ((array:item abStagingY (i - (11 * row))) + (row * 2))
            let myDistance sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor)))
             if not(any? units with[targetBridge = 2 and allegiance = GERMAN and (destinationNum > i + 1 or destinationNum = -1) and sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor))) < myDistance])[
               ;we are setting this brigade to move to destination i, no others can move here now
               set destinationNum i
               set destinationX goalX
               set destinationY goalY
               set state s_Q_BRIDGE
               stop
             ]
          ]
        ]
        ;;this handles units looking to cross the Abbeville bridge
        if(targetBridge = 3)[
          ;this isn' a valid spot if someone else is going to use it
          if(any? units with[destinationNum = i and targetBridge = 3 and allegiance = GERMAN])[
            set valid 0
          ]
          ;the spot is not valid if it is farther from the bridge than the current destination
          if(i > destinationNum and destinationNum > -1)[
            set valid 0
          ]
          if(valid = 1)[
            ;find the location of this destination by finding the base location and shifting by the row it's in
            let goalX ((array:item amStagingX (i - (11 * row))) + (row * 2))
            let goalY ((array:item amStagingY (i - (11 * row))) + (row * 2))
            let myDistance sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor)))
            if not(any? units with[targetBridge = 3 and allegiance = GERMAN and (destinationNum > i + 1 or destinationNum = -1) and sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor))) < myDistance])[
              ;we are setting this brigade to move to destination i, no others can move here now
              set destinationNum i
              set destinationX goalX
              set destinationY goalY
              set state s_Q_BRIDGE
              stop
            ]
          ]
        ]
        if(targetBridge = 4)[       
          ;this isn' a valid spot if someone else is going to use it
          if(any? units with[destinationNum = i and targetBridge = 4 and allegiance = GERMAN])[
            set valid 0
          ]
          ;the spot is not valid if it is farther from the bridge than the current destination
          if(i > destinationNum and destinationNum > -1)[
            set valid 0
          ]
          if(valid = 1)[
            ;find the location of this destination by finding the base location and shifting by the row it's in
            let goalX ((array:item brStagingX (i - (11 * row))) + (row * -2))
            let goalY ((array:item brStagingY (i - (11 * row))) + (row * 2))
            let myDistance sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor)))
            ;we are setting this brigade to move to destination i, no others can move here now
            if not(any? units with[targetBridge = 4 and allegiance = GERMAN and (destinationNum > i + 1 or destinationNum = -1) and sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor))) < myDistance])[
              set destinationNum i
              set destinationX goalX
              set destinationY goalY
              set state s_Q_BRIDGE
              stop
            ]
          ]
        ]
        if(targetBridge = 5)[
          
          ;this isn' a valid spot if someone else is going to use it
          if(any? units with[destinationNum = i and targetBridge = 5 and allegiance = GERMAN])[
            set valid 0
          ]
          ;the spot is not valid if it is farther from the bridge than the current destination
          if(i > destinationNum and destinationNum > -1)[
            set valid 0
          ]
          ;this isn't a valid spot if a closer brigade needs to move toward it
          if(valid = 1)[
            ;we are setting this brigade to move to destination i, no others can move here now
            ;find the location of this destination by finding the base location and shifting by the row it's in
            let goalX ((array:item peStagingX (i - (11 * row))) + (row * 2))
            let goalY ((array:item peStagingY (i - (11 * row))) + (row * 2))
            let myDistance sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor)))
            if not(any? units with[targetBridge = 5 and allegiance = GERMAN and (destinationNum > i + 1 or destinationNum = -1) and sqrt((abs(goalX - xcor) * abs(goalX - xcor)) + (abs(goalY - ycor) * abs(goalY - ycor))) < myDistance])[
              set destinationNum i
              set destinationX goalX
              set destinationY goalY
              set state s_Q_BRIDGE
              stop
            ]
          ]
        ]
      ]
      set i (i + 1);;after we've looked at a spot incriment so we can look at the next one on the next pass
    ]
  ]
  if(state = s_RESERVE and allegiance = GERMAN and destinationNum = -1)[
    ifelse(targetBridge = 1)[
      set destinationX ((array:item chStagingX (25 - (11 * 2))) + (2 * 2))
      set destinationY ((array:item chStagingY (25 - (11 * 2))) + (2 * 2))
    ]
    [
    ifelse(targetBridge = 2)[
      set destinationX ((array:item abStagingX (25 - (11 * 2))) + (2 * 2))
      set destinationY ((array:item abStagingY (25 - (11 * 2))) + (2 * 2))
    ]
    [
    ifelse(targetBridge = 3)[
      set destinationX ((array:item amStagingX (25 - (11 * 2))) + (2 * 2))
      set destinationY ((array:item amStagingY (25 - (11 * 2))) + (2 * 2))
    ]
    [
    ifelse(targetBridge = 4)[
      set destinationX ((array:item brStagingX (25 - (11 * 2))) + (2 * 2))
      set destinationY ((array:item brStagingY (25 - (11 * 2))) + (2 * 2))
    ]
    [
    if(targetBridge = 5)[
      set destinationX ((array:item peStagingX (25 - (11 * 2))) + (2 * 2))
      set destinationY ((array:item peStagingY (25 - (11 * 2))) + (2 * 2))
    ]]]]]
  ]
  
end

to crossBridge
  ;move to a relay point if unable to find a specific destination
  if (state = s_RESERVE and allegiance = GERMAN and destinationX > -1)[
    if(destinationNum = -1)[
      facexy destinationX destinationY
      jump curSpeed
    ]
    if(destinationNum = 0 )[
      let curTarget targetBridge
      if not(any? turtles with[allegiance = GERMAN and targetBridge = curTarget and state = s_ON_BRIDGE])[
       set state s_ON_BRIDGE
      ] 
    ]
  ]
  
  ;if the nazi brigade is stationary and ready for orders
  if (state = s_Q_BRIDGE ) [;if the unit is moving toward a waiting position go toward it until it's too close to move farther
    ifelse(abs (destinationX - xcor) < curSpeed and abs (destinationY - ycor) < curSpeed)[
      ;if the unit reached its waiting position face the enemies and set its state to ready to move
      setxy destinationX destinationY
      set state s_RESERVE
      facexy 170 450
    ] [
      ;; show "trying to move"
      ;if it hasn't reached its waiting point move toward it at its normal speed
      facexy destinationX destinationY
      jump curSpeed
    ]
  ]
  if (state = s_ON_BRIDGE and allegiance = GERMAN) [ ; if german and currently crossing the bridge
    set destinationNum -1
     if (targetBridge = 1) [
       set chCrossed chCrossed + (crossingRate * numBridges)
       setxy (array:item chStagingX 0) - ((array:item chStagingX 0 - chX) * (chCrossed /(curInf + curAT + curTanks + curArt))) array:item chStagingY 0 - ((array:item chStagingY 0 - chY) * (chCrossed /(curInf + curAT + curTanks + curArt)))
    ;   jump 1
       if(xcor <= chX and ycor <= chY)[
         set state s_OVR_BRIDGE
         set chCrossed 0
         set destinationNum -1
       ]
     ]
     if (targetBridge = 2) [
       set abCrossed abCrossed + (crossingRate * numBridges)
       setxy (array:item abStagingX 0) - ((array:item abStagingX 0 - abX) * (abCrossed /(curInf + curAT + curTanks + curArt))) array:item abStagingY 0 - ((array:item abStagingY 0 - abY) * (abCrossed /(curInf + curAT + curTanks + curArt)))
   ;    jump 1
       if(xcor <= abX and ycor <= abY)[
         set state s_OVR_BRIDGE
         set abCrossed 0
         set destinationNum -1
       ]
     ] 
     if (targetBridge = 3) [
       set amCrossed amCrossed + (crossingRate * numBridges)
       setxy (array:item amStagingX 0) - ((array:item amStagingX 0 - amX) * (amCrossed /(curInf + curAT + curTanks + curArt))) array:item amStagingY 0 - ((array:item amStagingY 0 - amY) * (amCrossed /(curInf + curAT + curTanks + curArt)))
  ;     jump 1
       if(xcor <= amX and ycor <= amY)[
         set state s_OVR_BRIDGE
         set amCrossed 0
         set destinationNum -1
       ]
     ]
     if(targetBridge = 4)[
       set brCrossed brCrossed + (crossingRate * numBridges)
     ;  setxy (array:item amStagingX 0) - ((array:item amStagingX 0 - amX) * (amCrossed /(curInf + curAT + curTanks + curArt))) array:item amStagingY 0 - ((array:item amStagingY 0 - amY) * (amCrossed /(curInf + curAT + curTanks + curArt)))
       setxy (array:item brStagingX 0) - ((array:item brStagingX 0 - brX) * (brCrossed /(curInf + curAT + curTanks + curArt))) (array:item brStagingY 0) - ((array:item brStagingY 0 - brY) * (brCrossed /(curInf + curAT + curTanks + curArt)))
      
 ;      jump 1
       if(ycor <= brY)[
         set state s_OVR_BRIDGE
         set brCrossed 0
         set destinationNum -1
       ]
     ] 
     if(targetBridge = 5)[
       set peCrossed peCrossed + (crossingRate * numBridges)
       setxy (array:item peStagingX 0) - ((array:item peStagingX 0 - peX) * (peCrossed /(curInf + curAT + curTanks + curArt))) array:item peStagingY 0 - ((array:item peStagingY 0 - peY) * (peCrossed /(curInf + curAT + curTanks + curArt)))
;       jump 1
       if(xcor <= peX and ycor <= peY)[
         set state s_OVR_BRIDGE
         set peCrossed 0
         set destinationNum -1
       ]
     ]
  ]
end